import { SetStateAction, useEffect, useState } from "react";
import { convertFromRaw, convertToRaw, EditorState } from "draft-js";
import {
  Editor,
  getDefaultKeyBindingFn,
  shortcutHandler,
  emptyRawContentState,
} from "contenido";
import ToolbarButtons from "./ToolbarButtons";
import { useSession } from "next-auth/react";
import { useRouter } from "next/router";

// —Å—Ä–∞–∑—É –ø–∞—Ä—É –º–æ–º–µ–Ω—Ç–æ–≤. - —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞, –Ω–∞–¥–æ —á–µ—Ç –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å.
// –º–Ω–µ –Ω–µ –Ω—É–∂–Ω–æ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –æ–±–Ω–æ–≤–ª—è—Ç—å –∞–π–¥–∏ –∏ –º—ã–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ç–æ–∂–µ —á–µ—Ç –¥–µ–ª–∞—Ç—å –±—É–¥–µ–º.
// –Ω–æ –ø–æ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –Ω–æ—Ä–º. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Ç–æ–º.
const CustomEditor = ({id}:any) => {

  // –ø–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
  const { data: session, status } = useSession();
  const router = useRouter();
  const _id = id // –∞–π–¥–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞


  async function updateData() {
    // –ø–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞(contentState) —Å –ø–æ–º–æ—â—å—é getCurrentContent()
    // convertToRaw –ø—Ä–µ–æ–±—Ä–∞–∑—É–µn—Ç –≤ —Å—ã—Ä–æ–π –æ–±—ä–µ–∫—Ç —Ç–¥–ª—è –æ—Ç–ø–∞—Ä–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const content = JSON.stringify(
      convertToRaw(editorState.getCurrentContent())
    );
    console.log("üöÄ ~ file: CustomEditor.tsx:31 ~ updateData ~ content:", content)

    const data = {
      email: session?.user.email,
      userId:session?.user.userId,
      _id:_id,
      body: content, // –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    };

    const response = await fetch(`/api/updateData`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(data),
    });
  }

  const emptyContentState = convertFromRaw(emptyRawContentState);
  const [editorState, setEditorState] = useState<EditorState>(
    EditorState.createWithContent(emptyContentState)
  );

  const handleEditorChange = (editorState: SetStateAction<EditorState>) => {
    setEditorState(editorState);
  };

  useEffect(()=> {
   setTimeout(() => {
    updateData();
   },500)
   console.log('–ø—É—Å—Ç—å –±—É–¥–µ—Ç –ø–æ–∫–∞ —á—Ç–æ —Ç–∞–∫');
   
  })

  useEffect(() => {
    async function fetchData() {
      if (_id) {
        console.log("üöÄ ~ file: CustomEditor.tsx:67 ~ fetchData ~ _id:", _id)
        // –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        const data = await fetch(`/api/getData?_id=${_id}`);
        if (data) {
          const response = await data.json();
          if (typeof response === "string") {
            const contentState = await convertFromRaw(JSON.parse(response));
            setEditorState(EditorState.createWithContent(contentState));
          } else {
            setEditorState(EditorState.createEmpty());
          }
        } 
      }
    }

    fetchData();
  }, [session]);

  return (
    <>
      <ToolbarButtons
        editorState={editorState}
        setEditorState={setEditorState}
      />
      <button onClick={updateData}> –Ω–∞–∂–º–∏ </button>

      <Editor
        editorKey="editor"
        editorState={editorState}
        onChange={handleEditorChange}
        handleKeyCommand={shortcutHandler(setEditorState)}
        keyBindingFn={getDefaultKeyBindingFn}
      />
    </>
  );
};

export default CustomEditor;
