import { SetStateAction, useEffect, useState, useCallback, use, useInsertionEffect, useContext } from "react";
import {convertFromRaw, convertToRaw, EditorState, genKey } from "draft-js";
import {
  getDefaultKeyBindingFn,
  shortcutHandler,
  emptyRawContentState,
} from "contenido";
import ToolbarButtons from "./ToolbarButtons";
import { useSession } from "next-auth/react";
import { Session } from "next-auth";
import Editor from '@draft-js-plugins/editor';
import s from './CustomEditor.module.scss'
import { useRouter } from "next/router";
import { AppContext } from "../../../context/app.context";
const CustomEditor = ({ id, body, title,setCheckTitle,checkTitle }: any) => {

  const [value, setValue] = useState('');
  const { data: session } = useSession();
  const router = useRouter()
  const _id = id;
  // const { title1 } = useContext(AppContext);


  


  // convertFromRaw - —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ –º—ã –Ω–∞—à –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ —Å–ø–µ—Ü –æ–±—ä–µ–∫—Ç –¥–ª—è draft js
  const [editorState, setEditorState] = useState<EditorState>(
    EditorState.createWithContent(convertFromRaw(emptyRawContentState)) // –∏ —Ç–µ–ø–µ—Ä—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—à–µ–≥–æ —Å–ø–µ—Ü –æ–±—ä–µ–∫—Ç–∞ –º—ã —Å–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞. –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –æ–Ω–æ –ø—É—Å—Ç–æ–µ.
  );

  const handleEditorChange = (editorState: SetStateAction<EditorState>) => {
      setEditorState(editorState);
    }

  useEffect(() => {
        if (body) {
         
            const contentState = convertFromRaw(JSON.parse(body)); // —Ç—É—Ç –º—ã –ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Å –±–∞–∑—ã –≤ —Å–ø–µ—Ü –æ–±—ä–µ–∫—Ç draft js
            setEditorState(EditorState.createWithContent(contentState)); // –∏ –Ω–∞ –µ–≥–æ –æ—Å–Ω–æ–≤–µ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞\
            setValue(title)

          } 

  }, [_id, session]);
  useEffect(() => {
    if (title) {
     
        setValue(title)

      } 

}, [_id, session]);
 
  useEffect(() => {
  
    const updateData = async (editorState: EditorState, session: Session | null, _id: any,) => {
       // convertToRaw –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç draft js –≤ –æ–±—ã—á–Ω—ã–π –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Å—Ä–∞–∑—É –±–∞—Ö–∞–µ–º –≤ json, —á—Ç–æ –±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const content = JSON.stringify(convertToRaw(editorState.getCurrentContent())); // getCurrentContent - –≤–æ–∑–≤–∞—Ä–∞—â–µ—Ç –Ω–∞–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –≤ —Å–ø–µ—Ü –æ–±—ä–µ–∫—Ç draft js
      const data = {
        email: session?.user.email,
        userId: session?.user.userId,
        _id: _id,
        body: content,
        title:value // –∫–æ—Ä–æ—á–µ –¥–µ–ª–∞–π –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è  title –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –µ–µ. –≠—Ç–æ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–¥ —Ç–µ–ª–æ! 
      };
  
      try {
        const response = await fetch(`/api/updateData`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(data),
        });

       
       
      } catch (error) {
        console.log("üöÄ ~ file: CustomEditor.tsx:66 ~ updateData ~ error:", error)
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
      }

     
    };
  
    const timer = setTimeout(() => {
      updateData(editorState, session, _id);
    }, 200);
  
    return () => clearTimeout(timer);
  }, [editorState, session, _id,]);

  useEffect(() => {
    const updateTitle = async (session: Session | null, _id: any,) => {
      // convertToRaw –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç draft js –≤ –æ–±—ã—á–Ω—ã–π –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Å—Ä–∞–∑—É –±–∞—Ö–∞–µ–º –≤ json, —á—Ç–æ –±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
     const data = {
       email: session?.user.email,
       userId: session?.user.userId,
       _id: _id,
       title:value // –∫–æ—Ä–æ—á–µ –¥–µ–ª–∞–π –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è  title –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –µ–µ. –≠—Ç–æ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–¥ —Ç–µ–ª–æ! 
     };
 
     try {
       const response = await fetch(`/api/updateTitle`, {
         method: "POST",
         headers: {
           "Content-Type": "application/json",
         },
         body: JSON.stringify(data),
       });

      
      
     } catch (error) {
       console.log("üöÄ ~ file: CustomEditor.tsx:66 ~ updateData ~ error:", error)
       // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
     }

    
   };


   const timer = setTimeout(() => {
    updateTitle(session, _id);
    setCheckTitle(!checkTitle);
  }, 200);

  return () => clearTimeout(timer);
 
  },[value])
  
  return (
    <>
    
    <div className={s.toolbar}>
      <ToolbarButtons
        editorState={editorState}
        setEditorState={setEditorState}
      />

      <div className={s.body}>
      <input placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫ " className={s.title} value={value} onChange={(e)=> setValue(e.target.value)}/>
      <Editor 
        placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç"
        editorKey="editor"
        editorState={editorState}
        onChange={handleEditorChange}
        handleKeyCommand={shortcutHandler(setEditorState)}
        keyBindingFn={getDefaultKeyBindingFn}
      />
      </div>
      </div>
    </>
  );
};

export default CustomEditor;
