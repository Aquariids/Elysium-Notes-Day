import { DeleteRestoreAction } from "./actios";
import {
  deleteAllData,
  deleteData,
  deleteDataRecycle,
  restoreDataRecycle,
} from "./auth/lib/dataFromDatabase";
import { NextApiRequest, NextApiResponse } from "next";
interface IRequest {
  req: NextApiRequest;
  query: {
    action: DeleteRestoreAction;
    _id: string;
    userId: string;
  };
}

export default async function handler(req: IRequest, res: NextApiResponse) {
  const _id = req.query._id;
  const userId = req.query.userId;
  console.log("üöÄ ~ file: deleteAndRestoreData.ts:21 ~ handler ~ userId:", userId)
  const isValidObjectId = /^[0-9a-fA-F]{24}$/.test(_id); // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ _id mongodb –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
  const action:DeleteRestoreAction = req.query.action as DeleteRestoreAction;
  if(!userId) res.status(500).send("–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π userId. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.");
  else {
    try {
      switch (action) {
        case "delete_one_notes_recycle":
          isValidObjectId && (await deleteDataRecycle(_id, userId));
          res.status(200).send("–ó–∞–ø–∏—Å—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É");
          break;
        case "delete_one_notes":
          isValidObjectId && (await deleteData(_id, userId));
          res.status(200).send("–ó–∞–ø–∏—Å—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã —É–¥–∞–ª–µ–Ω–∞ ");
          break;
        case "delete_all_notes_recycle":
          userId && (await deleteAllData(userId));
          res.status(200).send("–í—Å–µ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã");
          break;
        case "restore_data":
          await restoreDataRecycle(_id, userId);
          res.status(200).send('–ó–∞–ø–∏—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
          break;
  
      }
    } catch (error) {
      res
        .status(500)
        .send(
          "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ _id"
        );
    }
  }

}
