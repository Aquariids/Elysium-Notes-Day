import { ObjectId } from "mongodb";
import clientPromise from "./mongodb";
interface dbPros {
  collectionName: string;
  db: string;
}

async function getClient() {
  return await clientPromise;
}

async function getCollection({ db, collectionName }: dbPros) {
    const client = await getClient();
    const database = client.db(db);
    const collection = database.collection(collectionName);
    return await collection;
  }
  

// –í –æ–±—â–µ–º —Ç—É —è –æ—Ç–ø—Ä–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –Ω–∞ –±–∞–∑—É –º–æ–Ω–≥–æ.
export async function updateDataInDatabase(data: any) {

  try {
    const id = new ObjectId(data._id);
    const collection = await getCollection({
      collectionName: `user_${data.userId}`,
      db: "notes",
    });
    // const formattedDate = format(currentDate, 'yyyy-MM-dd HH:mm:ss');
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—ã—Ä–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö - —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ draft js
    // –≠—Ç–æ—Ç –æ–±—ä–µ–∫—Ç –º—ã –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å –ø–æ–º–æ—â—å—é converToRaw –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç ContentState –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–º —Å—ã—Ä–æ–π –æ–±—ä–µ–∫—Ç.
    // —Ç–∞–∫–æ–π –æ–±—ä–µ–∫—Ç –º–æ–∂–Ω–æ –≥–¥–µ —Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –µ—â–µ –≥–¥–µ —Ç–æ. –í –æ–±—â–µ–º –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–µ.
    await collection.findOneAndUpdate(
      //$and - –æ–±—ä–µ–¥–µ–Ω—è–µ—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–æ–∑—Ä–≤—Ä–∞—â–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥ —É—Å–ª–æ–≤–∏–µ. —Ç–∏–ø–æ —Ç–æ–∂–µ —Å–∞–º–æ–µ —á—Ç–æ –ª–æ–≥–∏—á–µ—Å–∫–æ–µ &&
      { $and: [{ userId: data.userId }, { email: data.email }, { _id: id }] }, // —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ email —Ä–∞–≤–µ–Ω data.email –∏ userId —Ä–∞–≤–µ–Ω data.userId
      {
        $set: {
          body: data.body,
        },
      } // —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–ª–æ. $set –æ–ø–µ—Ä–∞—Ç–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –∏–ª–∏ –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ.
    );
  } catch (error) {
    const client = await getClient();
    client.close();
  }
}

export async function updateIdPageForNote(data: any) {

  const dataConfirm = data[0] && data[0]
  try {
    const collection = await getCollection({
      collectionName: `user_createBook_${dataConfirm.userId}`,
      db: "notes",
    });
    await collection.findOneAndUpdate(
      { $and: [{ userId: dataConfirm.userId }, { email: dataConfirm.email }] }, 
      {
        $set: {
          idPage: dataConfirm.idPage,
        },
      } 
    );
  } catch (error) {
    const client = await getClient();
    client.close();
  }
}






export async function updateIdPageForOneNote(data: any) {

  try {
    const id = new ObjectId(data._id);
    const collection = await getCollection({
      collectionName: `user_${data.userId}`,
      db: "notes",
    });
    await collection.findOneAndUpdate(
      { $and: [{ userId: data.userId }, { email: data.email }, {_id: id}] }, 
      {
        $set: {
          idPage: data.idPage,
        },
      } 
    );
  } catch (error) {
    const client = await getClient();
    client.close();
  }
}


export async function deleteIdPageForNote(data: any) {
  try {

    const collection = await getCollection({
      collectionName: `user_${data.userId}`,
      db: "notes",
    });
    await collection.updateMany(
      { $and: [{ userId: data.userId }, { email: data.email }] }, 
      {
        $set: {
          idPage: '',
        },
      } 
    );
  } catch (error) {
    const client = await getClient();
    client.close();
  }
}


export async function updateDataTitle(data: any) {


  try {
    const id = new ObjectId(data._id);
    const collection = await getCollection({
      collectionName: `user_${data.userId}`,
      db: "notes",
    });
    await collection.updateOne(
      { _id: id },
      {
        $set: {
          title: data.title || ''
        }
      } // —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–ª–æ. $set –æ–ø–µ—Ä–∞—Ç–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –∏–ª–∏ –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ.
    );
  } catch (error) {
    const client = await getClient();
    client.close();
  }
}


export async function updateBlockLink(data: any) {
  try {
    const id = new ObjectId(data._id);
    const collection = await getCollection({
      collectionName: `user_${data.userId}`,
      db: "notes",
    });
    await collection.updateOne(
      { _id: id },
      {
        $set: {
          block: data.block,
        },
      } 
    );
  } catch (error) {
    const client = await getClient();
    client.close();
  }
}

export async function updateModeCode(data: any) {  
  try {
    const id = new ObjectId(data._id);
    const collection = await getCollection({
      collectionName: `user_${data.userId}`,
      db: "notes",
    });
    await collection.updateOne(
      { _id: id },
      {
        $set: {
          code: data.code,
        },
      } 
    );
  } catch (error) {
    const client = await getClient();
    client.close();
  }
}


export async function updateLastDate(data: any) {  
  try {
    
    const id = new ObjectId(data._id);
    const collection = await getCollection({
      collectionName: `user_${data.userId}`,
      db: "notes",
    });
    await collection.updateOne(
      { _id: id },
      {
        $set: {
          updateDate: data.updateDate ?? '',
        },
      } 
    );
  } catch (error) {
    const client = await getClient();
    client.close();
  }
}


export async function updateNoteBookMainMenu(data: any) {
  try {
    const collection = await getCollection({
      collectionName: `user_nooteBook_${data.userId}`,
      db: "notes",
    });
    await collection.updateOne(
      { userId: data.userId },
      {
        $set: {
          body: data.body,
        },
      } // —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–ª–æ. $set –æ–ø–µ—Ä–∞—Ç–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –∏–ª–∏ –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ.
    );
  } catch (error) {
    const client = await getClient();
    client.close();
  }
}


export async function updateActionSorting(data: any) {
  try {
    const collection = await getCollection({
      collectionName: `user_actionSorting_${data.userId}`,
      db: "notes",
    });
    await collection.updateOne(
      { userId: data.userId },
      {
        $set: {
          sorting: data.sorting,
        },
      } // —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–ª–æ. $set –æ–ø–µ—Ä–∞—Ç–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –∏–ª–∏ –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ.
    );
  } catch (error) {
    const client = await getClient();
    client.close();
  }
}



export async function updateBookForNotes(data: any) {
console.log("üöÄ ~ file: Update.ts:255 ~ updateBookForNotes ~ data:", data)

  try {
    const collection = await getCollection({
      collectionName: `main_book_${data.userId}`,
      db: "notes",
    });

    if(data.book) {
      await collection.updateOne(
        { userId: data.userId, email:data.email },
        {
          $set: {
          book: data.book,
          },
        } 
      );
    }
    if(data.name) {
        await collection.updateOne(
          { userId: data.userId, email:data.email },
          {
            $set: {
              name: data.name,
            },
          } 
        );
    }
    
  } catch (error) {
    const client = await getClient();
    client.close();
  }
}


