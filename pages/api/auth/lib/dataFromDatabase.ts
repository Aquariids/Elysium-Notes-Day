import { ObjectId } from 'mongodb';
import clientPromise from './mongodb';

// export async function getTitleFromDatabase(userId: any ,email:any) {
//   const client = await clientPromise;
//   const database = client.db('notes2');
//   const collection = database.collection('page2');
//   const query = userId && email ? {userId, email}: {};
//   const title = await collection.find()
//   console.log("üöÄ ~ file: dataFromDatabase.ts:10 ~ getTitleFromDatabase ~ title:", title.title)
  
  

//   return title && title.title; 

// }


export async function getAllNotesFromDatabase(userId: any,email: any) {
  const query = userId && email ? {userId, email}: {};
  const client = await clientPromise;
  const database = client.db('notes2');
  const collection = database.collection('page2');
  const data = await collection.find(query).toArray();
  
  return data; 

}

export async function createDatabase (data:any) {
  const client = await clientPromise;
  const database = client.db('notes2');
  const collection = database.collection('page2');
  const result =  collection.insertOne(data); // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—Å—Ç–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
  return result;
}

export async function deleteData (_id:any) {
  const client = await clientPromise;
  const database = client.db('notes2');
  const collection = database.collection('page2');
  const id = new ObjectId(_id)
  const result = await collection.deleteOne({_id:id});
  return result;
}


// –í –æ–±—â–µ–º —Ç—É —è –æ—Ç–ø—Ä–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –Ω–∞ –±–∞–∑—É –º–æ–Ω–≥–æ.
export async function updateDataInDatabase(data: any) {
  const id = new ObjectId(data._id)
  const client = await clientPromise;
  const database = client.db('notes2');
  const collection = database.collection('page2');  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—ã—Ä–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö - —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ draft js
  // –≠—Ç–æ—Ç –æ–±—ä–µ–∫—Ç –º—ã –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å –ø–æ–º–æ—â—å—é converToRaw –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç ContentState –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–º —Å—ã—Ä–æ–π –æ–±—ä–µ–∫—Ç.
  // —Ç–∞–∫–æ–π –æ–±—ä–µ–∫—Ç –º–æ–∂–Ω–æ –≥–¥–µ —Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –µ—â–µ –≥–¥–µ —Ç–æ. –í –æ–±—â–µ–º –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–µ.
  await collection.findOneAndUpdate (
    //$and - –æ–±—ä–µ–¥–µ–Ω—è–µ—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–æ–∑—Ä–≤—Ä–∞—â–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥ —É—Å–ª–æ–≤–∏–µ. —Ç–∏–ø–æ —Ç–æ–∂–µ —Å–∞–º–æ–µ —á—Ç–æ –ª–æ–≥–∏—á–µ—Å–∫–æ–µ &&
    {  $and: [ {userId:data.userId}, {email:data.email}, {_id: id}]}, // —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ email —Ä–∞–≤–µ–Ω data.email –∏ userId —Ä–∞–≤–µ–Ω data.userId
    { $set: {
      body: data.body,
    }
 }, // —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–ª–æ. $set –æ–ø–µ—Ä–∞—Ç–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –∏–ª–∏ –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ.

  );

}
  export async function updateDataTitle(data: any) {
    console.log("üöÄ ~ file: dataFromDatabase.ts:69 ~ updateDataTitle ~ data:", data)
    const id = new ObjectId(data._id)
    const client = await clientPromise;
    const database = client.db('notes2');
    const collection = database.collection('page2');  
    await collection.updateOne (
      { _id: id}, 
      { $set: {
        title: data.title
      }
   }, // —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–ª–æ. $set –æ–ø–µ—Ä–∞—Ç–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –∏–ª–∏ –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ.
  
    );

  
}
