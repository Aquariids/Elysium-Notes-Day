import Head from "next/head";
import React, { useCallback, useEffect, useState } from "react";
import { authOptions } from "./api/auth/[...nextauth]";
import { getServerSession } from "next-auth/next";
import { NOTES, SIGNIN } from "./api/paths";
import { withLayout } from "../layout/Layout";
import Link from "next/link";
import s from "./index.module.scss";
import List from "@/Components/NotesList/List";
import TextareaAutosize from "react-textarea-autosize";
import { useSession } from "next-auth/react";
import { create_data, get_action, update_action } from "./api/actios";
import Arrow from "./arr.svg";
import NewNotesMainMenu from "@/Components/ButtonCreateNewNotes/NewNotesMainMenu";
import cn from "classnames";
import AnimationContainer from "@/Components/AnimationContainer/AnimationContainer";
import { sorting } from "../utils/sorting";
import { DateTime } from "luxon";
import { Settings } from "luxon";
Settings.defaultLocale = "ru";
DateTime.local().setLocale("ru");
function Home({ data_editor, data_note_main_menu }: any) {
  const [value, setValue] = useState<string>(
    data_note_main_menu[0] === undefined ? "" : data_note_main_menu[0].body
  );
  const [currentDate, setCurrentDate] = useState<string>();
  const session = useSession();
  const userId = session.data?.user.userId;
  const email = session.data?.user.email;
  const [sort, setSort] = useState<any>("");
  useEffect(() => {
    const userTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;
    const userDate = DateTime.now().setZone(userTimeZone);
    const formattedDate = userDate
      .toFormat("EEEE, d MMMM yyyy")
      .toLocaleUpperCase();
    const sort = localStorage.getItem("sorting") || "";
    setSort(sort);
    setCurrentDate(formattedDate + " –≥.");
  }, []);

  const monika = `–¶–≤–µ—Ç–∞, –æ–Ω–∏ –Ω–µ
–Ø—Ä–∫–∏–µ, –ø—Ä–µ —Ä–∞ –Ω—ã–µ —Ü–≤ —Ç
–ú —Ä—Ü–∞—é—Ç, –≤–∑ —ã–≤–∞ —Ç—Å—è, –ø—Ä –Ω–∑ —é—Ç
–ö—Ä–∞—Å–Ω—ã–π, –∑–µ–ª–µ–Ω—ã–π, —Å–∏–Ω–∏–π
–ë–µ—Å –æ–Ω–µ—á–Ω–∞—è

–ö–ê–ö–û–§–û–ù–ò–Ø
–ë–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ–≥–æ
—à—É–º–∞

–®—É–º, –æ–Ω –Ω–µ –ü–†–ï–ö–†–ê–©–ê–ï–¢–°–Ø.

–ë–µ–∑—É –Ω—ã–µ, –≥—Ä–æ—Ö —á—É –∏–µ –≤–æ –Ω—ã
–ü–∏ –∞—Ç, –≤ –∑–∂–∞—Ç, –ø—Ä –Ω–∑–∞ —é—Ç

–°–ò–ù–£–°, –ö–û–°–ò–ù–£–°, –¢–ê–ù–ì–ï–ù–°

–ö–∞–∫ –∏–≥—Ä —Ç—å —Å –ø–ª —Å—Ç–∏ –∫–æ–π –Ω–∞ –¥ –¥–∂–µ –≤–µ —Ç—É—à –µ.

–ö–∞–∫ –∏–≥—Ä–∞—Ç—å —Å –ù–û–ñ–û–ú –Ω–∞ –î–´–©–ê–©–ï–ô –ì–†–£–î–ò.

–µ—Å –æ–Ω —á–Ω –π
—Å –∏

–ë —Å –º—ã –ª–∏ —ã
–£–¥–∞–ª–∏ –µ—ë
  `;
  const createNotesBook = async () => {
    const dataNoteBook = {
      userId,
      email,
      body: monika,
    };
    const response = await fetch(
      `/api/createData?action=${create_data.create_data_main_menu}`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(dataNoteBook),
      }
    );
  };

  const createBookForNotes = async () => {
    const dataNoteBook = {
      userId,
      email,
      book: 'all',
    };
    const response = await fetch(
      `/api/createData?action=${create_data.create_book_for_notes}`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(dataNoteBook),
      }
    );
  };


  const createActionSorting = async () => {
    const sortData = {
      userId,
      email,
      sorting: "",
    };
    const response = await fetch(
      `/api/createData?action=${create_data.create_data_sorting}`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(sortData),
      }
    );
  };

  useEffect(() => {
    if (userId && email) {
      createNotesBook();
      createBookForNotes();
      createActionSorting();
    }
  }, [userId, email]);

  const updateData = useCallback(
    async (value: any, userId: any, email: any) => {
      try {
        const response = await fetch(
          `/api/updateData?action=${update_action.book_main_menu}`,
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              userId,
              email,
              body: value,
            }),
          }
        );
      } catch (error) {
        console.log(
          "üöÄ ~ file: CustomEditor.tsx:66 ~ updateData ~ error:",
          error
        );
      }
    },
    []
  );

  useEffect(() => {
    const timer = setTimeout(() => {
      updateData(value, userId, email);
    }, 500);

    return () => clearTimeout(timer);
  }, [value]);

  return (
    <>
      <Head>
        <title>Elysium notes day</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className={s.wrapper}>
        <div className={s.bg}>
          <div className={s.date_bg}>{currentDate}</div>
          <video
            className={cn(s.video, s.anim)}
            autoPlay
            muted
            loop
            src="/bg.mp4"
          ></video>
        </div>

        <AnimationContainer>
          <div className={s.wrapp2}>
            <div className={s.link_container}>
              <Link className={s.link_notes} href={`${NOTES}`}>
                <span>–ó–ê–ú–ï–¢–ö–ò</span> <Arrow />
              </Link>
            </div>
            <div className={s.container}>
              <List
                className={s.link}
                body={data_editor ? sorting(data_editor, sort) : ""}
              />
              <NewNotesMainMenu />
            </div>
          </div>
        </AnimationContainer>
        <AnimationContainer>
          <div className={s.notes}>
            <p>–ó–ê–ü–ò–°–ù–ê–Ø –ö–ù–ò–ñ–ö–ê</p>
            <TextareaAutosize
              placeholder="–ó–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å..."
              className={s.textArea}
              value={value}
              onChange={(e) => {
                setValue(e.target.value);
              }}
            />
          </div>
        </AnimationContainer>
      </div>
    </>
  );
}

export default withLayout(Home);

export async function getServerSideProps(context: any) {
  const session = await getServerSession(context.req, context.res, authOptions);
  const userId = session?.user.userId; // –∞–π–¥–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
  const email = session?.user.email;
  const responseEditorData = await fetch(
    `${process.env.DOMAIN}/api/getData?action=${get_action.data_editor}&userId=${userId}&email=${email}`
  );
  const responseNoteMainMenuData = await fetch(
    `${process.env.DOMAIN}/api/getData?action=${get_action.data_note_main_menu}&userId=${userId}&email=${email}`
  );
  const data_editor = await responseEditorData.json();
  const data_note_main_menu = await responseNoteMainMenuData.json();
  if (!session) {
    return {
      redirect: {
        destination: `/${SIGNIN}`,
        permanent: false,
      },
    };
  }

  return {
    props: {
      data_editor,
      data_note_main_menu,
    },
  };
}
