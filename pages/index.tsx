import Head from "next/head";
import React, { useCallback, useEffect, useState } from "react";
import { authOptions } from "./api/auth/[...nextauth]";
import { getServerSession } from "next-auth/next";
import { NOTES, SIGNIN } from "./api/paths";
import { withLayout } from "../layout/Layout";
import Link from "next/link";
import s from "./index.module.scss";
import List from "@/Components/NotesList/List";
import TextareaAutosize from "react-textarea-autosize";
import { useSession } from "next-auth/react";
import { create_data, get_action, update_action } from "./api/actios";
import Arrow from "./arr.svg";
import NewNotesMainMenu from "@/Components/ButtonCreateNewNotes/NewNotesMainMenu";
import cn from "classnames";
import AnimationContainer from "@/Components/AnimationContainer/AnimationContainer";
import { sorting } from "../utils/sorting";
import { DateTime } from "luxon";
import { Settings } from "luxon";
import {
  getAllNotesFromDatabase,
  getNoteBookMainMenu,
} from "./api/auth/lib/Get";
Settings.defaultLocale = "ru";
DateTime.local().setLocale("ru");
function Home({ data_editor, data_note_main_menu, email, user_id }: any) {
  const [value, setValue] = useState<string>(
    data_note_main_menu[0] === undefined ? "" : data_note_main_menu[0].body
  );
  const [currentDate, setCurrentDate] = useState<string>();
  const session = useSession();

  const [sort, setSort] = useState<any>("");
  useEffect(() => {
    const userTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;
    const userDate = DateTime.now().setZone(userTimeZone);
    const formattedDate = userDate
      .toFormat("EEEE, d MMMM yyyy")
      .toLocaleUpperCase();
    const sort = localStorage.getItem("sorting") || "";
    setSort(sort);
    setCurrentDate(formattedDate + " –≥.");
  }, []);

  const monika = ``;
  const createNotesBook = async () => {
    const dataNoteBook = {
      user_id,
      email,
      body: monika,
    };
    const response = await fetch(
      `/api/createData?action=${create_data.create_data_main_menu}`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(dataNoteBook),
      }
    );
  };

  const createBookForNotes = async () => {
    const dataNoteBook = {
      user_id,
      email,
      book: "all",
    };
    const response = await fetch(
      `/api/createData?action=${create_data.create_book_for_notes}`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(dataNoteBook),
      }
    );
  };

  const createActionSorting = async () => {
    const sortData = {
      user_id,
      email,
      sorting: "",
    };
    const response = await fetch(
      `/api/createData?action=${create_data.create_data_sorting}`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(sortData),
      }
    );
  };

  useEffect(() => {
    if (user_id && email) {
      createNotesBook();
      createBookForNotes();
      createActionSorting();
    }
  }, [user_id, email]);

  const updateData = useCallback(
    async (value: any, userId: any, email: any) => {
      try {
        const response = await fetch(
          `/api/updateData?action=${update_action.book_main_menu}`,
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              userId,
              email,
              body: value,
            }),
          }
        );
      } catch (error) {
        console.log(
          "üöÄ ~ file: CustomEditor.tsx:66 ~ updateData ~ error:",
          error
        );
      }
    },
    []
  );

  const updateBookForNotes = useCallback(async () => {
    try {
      const response = await fetch(
        `/api/updateData?action=${update_action.update_id_book_for_all_notes}`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            userId: session.data?.user.userId,
            email: session.data?.user.email,
            book: "all",
          }),
        }
      );
    } catch (err) {
      console.error(err);
    }
  }, []);

  useEffect(() => {
    const timer = setTimeout(() => {
      updateData(value, user_id, email);
    }, 500);

    return () => clearTimeout(timer);
  }, [value]);

  return (
    <>
      <Head>
        <title>Elysium notes day</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className={s.wrapper}>
        <div className={s.bg}>
          <div className={s.date_bg}>{currentDate}</div>
          <video
            className={cn(s.video, s.anim)}
            autoPlay
            muted
            loop
            src="/bg.mp4"
          ></video>
        </div>

        <AnimationContainer>
          <div className={s.wrapp2}>
            <div className={s.link_container}>
              <Link
                onClick={updateBookForNotes}
                className={s.link_notes}
                href={`${NOTES}`}
              >
                <span>–ó–ê–ú–ï–¢–ö–ò</span> <Arrow />
              </Link>
            </div>
            <div className={s.container}>
              <List
                className={s.link}
                body={data_editor ? sorting(data_editor, sort) : ""}
              />
              <NewNotesMainMenu userId={user_id} email={email} />
            </div>
          </div>
        </AnimationContainer>
        <AnimationContainer>
          <div className={s.notes}>
            <p>–ó–ê–ü–ò–°–ù–ê–Ø –ö–ù–ò–ñ–ö–ê</p>
            <TextareaAutosize
              placeholder="–ó–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å..."
              className={s.textArea}
              value={value}
              onChange={(e) => {
                setValue(e.target.value);
              }}
            />
          </div>
        </AnimationContainer>
      </div>
    </>
  );
}

export default withLayout(Home);

export async function getServerSideProps(context: any) {

  try {
    const session = await getServerSession(context.req, context.res, authOptions);
    
    if (!session) {
      return {
        redirect: {
          destination: `/${SIGNIN}`,
          permanent: false,
        },
      };
    }
    
    const user_id: string = session?.user.userId; // –∞–π–¥–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
    const email: string = session?.user.email;
    if (user_id && email) {
      const responseEditorData = await getAllNotesFromDatabase(user_id, email); // responseEditorData - –ó–∞–º–µ—Ç–∫–∏ –≤—Å–µ, —Ç–æ –µ—Å—Ç—å –≤—Å–µ —á—Ç–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
      const responseNoteMainMenuData = await getNoteBookMainMenu(
        user_id,
        email
      );
      const serializedData = responseEditorData?.map((item) => ({
        // "—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º" –¥–∞–Ω–Ω—ã–µ, –∏ –¥–µ–ª–∞–µ–º –∏–∑ objectId —É mongodb –æ–±—ã—á–Ω—É—é —Å—Ç—Ä–æ–∫—É, —Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–º–µ —Ç–æ–∂–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        ...item,
        _id: item._id.toString(),
      }));
      const serializedDataMainMenu = responseNoteMainMenuData?.map((item) => ({
        // "—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º" –¥–∞–Ω–Ω—ã–µ, –∏ –¥–µ–ª–∞–µ–º –∏–∑ objectId —É mongodb –æ–±—ã—á–Ω—É—é —Å—Ç—Ä–æ–∫—É, —Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–º–µ —Ç–æ–∂–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        ...item,
        _id: item._id.toString(),
      }));

      return {
        props: {
          data_editor: serializedData,
          data_note_main_menu: serializedDataMainMenu,
          email,
          user_id,
        },
      };
    }
  } catch {
    return { props: {} };
  }
}
