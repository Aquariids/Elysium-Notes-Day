import Head from "next/head";
import React, { useCallback, useEffect, useState } from "react";
import { authOptions } from "./api/auth/[...nextauth]";
import { getServerSession } from "next-auth/next";
import { NOTES } from "./api/paths";
import { withLayout } from "../layout/Layout";
import Link from "next/link";
import s from "./index.module.scss";
import List from "@/Components/NotesList/List";
import TextareaAutosize from "react-textarea-autosize";
import ButtonCreateNewNotes from "@/Components/ButtonCreateNewNotes/ButtonCreateNewNotes";
import { useSession } from "next-auth/react";
function Home({ data,data1}: any) {
console.log("🚀 ~ file: index.tsx:14 ~ Home ~ data1:", data1)
const [value, setValue] = useState<string>('');
const session = useSession();
const userId = session.data?.user.userId 
const email = session.data?.user.email;
const dataNoteBook = {
  userId,
  email,
  body:''
}
  const createNotesBook = async () => {
      const response = await fetch("/api/createNoteBook", { 
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(dataNoteBook),
        
      }
      );
    
  }

  useEffect(() => {
    if(userId && email) {      
      createNotesBook()
    }
    
  },[userId, email])

  const updateData = useCallback(
    async (value:any,userId:any,email:any) => {
      try {
        const response = await fetch(`/api/updateNoteBook`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            userId,
            email,
            body: value
          }),
        });
      } catch (error) {
        console.log(
          "🚀 ~ file: CustomEditor.tsx:66 ~ updateData ~ error:",
          error
        );
      }
    },
    []
  );

  useEffect(() => {
    const timer = setTimeout(() => {
      updateData(value,userId,email);
    }, 300);

    return () => clearTimeout(timer);
  }, [value]);


  return (
    <>
      <Head>
        <title>Elysium notes day</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={s.wrapper}>
        <div className={s.bg}></div>
        <div className={s.wrapp2}>
            <Link className={s.link_notes} href={`${NOTES}`}>
              Заметки
            </Link>
            <div className={s.container}>
              <List  className={s.link} body={data} />
              <ButtonCreateNewNotes />
            </div>
        </div>
        <div className={s.notes}>
          <p>ЗАПИСНАЯ КНИЖКА</p>
          <TextareaAutosize placeholder="Запишите что-нибудь..." className={s.textArea} value={value || data1[0].body} onChange={(e)=> {setValue(e.target.value)}}/>
        </div>
      </div>
    </>
  );
}

export default withLayout(Home);

export async function getServerSideProps(context: any) {
  const session = await getServerSession(context.req, context.res, authOptions);
  const userId = session?.user.userId; // айди авторизованного человека
  const email = session?.user.email;
  const res = await fetch(
    `${process.env.DOMAIN}/api/getAllData?userId=${userId}&email=${email}`
  );
  const res1 = await fetch(
    `${process.env.DOMAIN}/api/noteBook?userId=${userId}&email=${email}`
  );
  const data = await res.json();
  const data1 = await res1.json();
  if (!session) {
    return {
      redirect: {
        destination: "/signin",
        permanent: false,
      },
    };
  }

  return {
    props: {
      data,
      data1
    },
  };
}
